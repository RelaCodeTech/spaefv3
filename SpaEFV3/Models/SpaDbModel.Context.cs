//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpaEFV3.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DevSpaEntities : DbContext
    {
        public DevSpaEntities()
            : base("name=DevSpaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Business> Businesses { get; set; }
        public virtual DbSet<Business_Details> Business_Details { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Location_Tax> Location_Tax { get; set; }
        public virtual DbSet<LookUp_Country> LookUp_Country { get; set; }
        public virtual DbSet<LookUp_LocationRegion> LookUp_LocationRegion { get; set; }
        public virtual DbSet<LookUp_Payment_Mode> LookUp_Payment_Mode { get; set; }
        public virtual DbSet<LookUp_State> LookUp_State { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tax_Master> Tax_Master { get; set; }
        public virtual DbSet<Therapist> Therapists { get; set; }
        public virtual DbSet<Treatment> Treatments { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<Voucher_Master> Voucher_Master { get; set; }
        public virtual DbSet<Voucher_Usage> Voucher_Usage { get; set; }
        public virtual DbSet<Xref_Location_Service> Xref_Location_Service { get; set; }
        public virtual DbSet<Xref_Location_Therapist> Xref_Location_Therapist { get; set; }
        public virtual DbSet<Xref_Service_Treatment> Xref_Service_Treatment { get; set; }
        public virtual DbSet<Order_Payment_Mode> Order_Payment_Mode { get; set; }
        public virtual DbSet<Purchase_Order> Purchase_Order { get; set; }
        public virtual DbSet<Stock_Added> Stock_Added { get; set; }
        public virtual DbSet<Treatment_Inventory_Usage> Treatment_Inventory_Usage { get; set; }
    
        public virtual int ADD_LOCATION(string loc_Code, string loc_Region, string loc_Name, string loc_Hotel_Name, string loc_Spa_Name, string loc_Address, string loc_City, string loc_State, string loc_Country, string loc_ContactNo, string loc_Comment)
        {
            var loc_CodeParameter = loc_Code != null ?
                new ObjectParameter("Loc_Code", loc_Code) :
                new ObjectParameter("Loc_Code", typeof(string));
    
            var loc_RegionParameter = loc_Region != null ?
                new ObjectParameter("Loc_Region", loc_Region) :
                new ObjectParameter("Loc_Region", typeof(string));
    
            var loc_NameParameter = loc_Name != null ?
                new ObjectParameter("Loc_Name", loc_Name) :
                new ObjectParameter("Loc_Name", typeof(string));
    
            var loc_Hotel_NameParameter = loc_Hotel_Name != null ?
                new ObjectParameter("Loc_Hotel_Name", loc_Hotel_Name) :
                new ObjectParameter("Loc_Hotel_Name", typeof(string));
    
            var loc_Spa_NameParameter = loc_Spa_Name != null ?
                new ObjectParameter("Loc_Spa_Name", loc_Spa_Name) :
                new ObjectParameter("Loc_Spa_Name", typeof(string));
    
            var loc_AddressParameter = loc_Address != null ?
                new ObjectParameter("Loc_Address", loc_Address) :
                new ObjectParameter("Loc_Address", typeof(string));
    
            var loc_CityParameter = loc_City != null ?
                new ObjectParameter("Loc_City", loc_City) :
                new ObjectParameter("Loc_City", typeof(string));
    
            var loc_StateParameter = loc_State != null ?
                new ObjectParameter("Loc_State", loc_State) :
                new ObjectParameter("Loc_State", typeof(string));
    
            var loc_CountryParameter = loc_Country != null ?
                new ObjectParameter("Loc_Country", loc_Country) :
                new ObjectParameter("Loc_Country", typeof(string));
    
            var loc_ContactNoParameter = loc_ContactNo != null ?
                new ObjectParameter("Loc_ContactNo", loc_ContactNo) :
                new ObjectParameter("Loc_ContactNo", typeof(string));
    
            var loc_CommentParameter = loc_Comment != null ?
                new ObjectParameter("Loc_Comment", loc_Comment) :
                new ObjectParameter("Loc_Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_LOCATION", loc_CodeParameter, loc_RegionParameter, loc_NameParameter, loc_Hotel_NameParameter, loc_Spa_NameParameter, loc_AddressParameter, loc_CityParameter, loc_StateParameter, loc_CountryParameter, loc_ContactNoParameter, loc_CommentParameter);
        }
    
        public virtual int ADD_USER(string uSER_ID, string pWD, string rOLE, string uSER_FNAME, string uSER_LNAME, ObjectParameter mSG)
        {
            var uSER_IDParameter = uSER_ID != null ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(string));
    
            var pWDParameter = pWD != null ?
                new ObjectParameter("PWD", pWD) :
                new ObjectParameter("PWD", typeof(string));
    
            var rOLEParameter = rOLE != null ?
                new ObjectParameter("ROLE", rOLE) :
                new ObjectParameter("ROLE", typeof(string));
    
            var uSER_FNAMEParameter = uSER_FNAME != null ?
                new ObjectParameter("USER_FNAME", uSER_FNAME) :
                new ObjectParameter("USER_FNAME", typeof(string));
    
            var uSER_LNAMEParameter = uSER_LNAME != null ?
                new ObjectParameter("USER_LNAME", uSER_LNAME) :
                new ObjectParameter("USER_LNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_USER", uSER_IDParameter, pWDParameter, rOLEParameter, uSER_FNAMEParameter, uSER_LNAMEParameter, mSG);
        }
    
        public virtual int DELETE_LOCATION(Nullable<int> lOC_ID)
        {
            var lOC_IDParameter = lOC_ID.HasValue ?
                new ObjectParameter("LOC_ID", lOC_ID) :
                new ObjectParameter("LOC_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_LOCATION", lOC_IDParameter);
        }
    
        public virtual ObjectResult<GET_ALL_LOCATION_Result> GET_ALL_LOCATION()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_ALL_LOCATION_Result>("GET_ALL_LOCATION");
        }
    
        public virtual ObjectResult<GET_LOC_FOR_REGION_Result> GET_LOC_FOR_REGION(string rEGION_NAME)
        {
            var rEGION_NAMEParameter = rEGION_NAME != null ?
                new ObjectParameter("REGION_NAME", rEGION_NAME) :
                new ObjectParameter("REGION_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_LOC_FOR_REGION_Result>("GET_LOC_FOR_REGION", rEGION_NAMEParameter);
        }
    
        public virtual ObjectResult<GET_LOCATION_Result> GET_LOCATION(Nullable<int> lOC_ID)
        {
            var lOC_IDParameter = lOC_ID.HasValue ?
                new ObjectParameter("LOC_ID", lOC_ID) :
                new ObjectParameter("LOC_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_LOCATION_Result>("GET_LOCATION", lOC_IDParameter);
        }
    
        public virtual ObjectResult<GET_THERAPIST_FOR_LOC_ID_Result> GET_THERAPIST_FOR_LOC_ID(Nullable<int> lOC_ID)
        {
            var lOC_IDParameter = lOC_ID.HasValue ?
                new ObjectParameter("LOC_ID", lOC_ID) :
                new ObjectParameter("LOC_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_THERAPIST_FOR_LOC_ID_Result>("GET_THERAPIST_FOR_LOC_ID", lOC_IDParameter);
        }
    
        public virtual int IS_VALID_USER(string uSER_ID, string pWD, ObjectParameter iS_ACTIVE)
        {
            var uSER_IDParameter = uSER_ID != null ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(string));
    
            var pWDParameter = pWD != null ?
                new ObjectParameter("PWD", pWD) :
                new ObjectParameter("PWD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IS_VALID_USER", uSER_IDParameter, pWDParameter, iS_ACTIVE);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UPDATE_LOCATION(Nullable<int> lOC_ID, string loc_Code, string loc_Region, string loc_Name, string loc_Hotel_Name, string loc_Spa_Name, string loc_Address, string loc_City, string loc_State, string loc_Country, string loc_ContactNo, string loc_Comment)
        {
            var lOC_IDParameter = lOC_ID.HasValue ?
                new ObjectParameter("LOC_ID", lOC_ID) :
                new ObjectParameter("LOC_ID", typeof(int));
    
            var loc_CodeParameter = loc_Code != null ?
                new ObjectParameter("Loc_Code", loc_Code) :
                new ObjectParameter("Loc_Code", typeof(string));
    
            var loc_RegionParameter = loc_Region != null ?
                new ObjectParameter("Loc_Region", loc_Region) :
                new ObjectParameter("Loc_Region", typeof(string));
    
            var loc_NameParameter = loc_Name != null ?
                new ObjectParameter("Loc_Name", loc_Name) :
                new ObjectParameter("Loc_Name", typeof(string));
    
            var loc_Hotel_NameParameter = loc_Hotel_Name != null ?
                new ObjectParameter("Loc_Hotel_Name", loc_Hotel_Name) :
                new ObjectParameter("Loc_Hotel_Name", typeof(string));
    
            var loc_Spa_NameParameter = loc_Spa_Name != null ?
                new ObjectParameter("Loc_Spa_Name", loc_Spa_Name) :
                new ObjectParameter("Loc_Spa_Name", typeof(string));
    
            var loc_AddressParameter = loc_Address != null ?
                new ObjectParameter("Loc_Address", loc_Address) :
                new ObjectParameter("Loc_Address", typeof(string));
    
            var loc_CityParameter = loc_City != null ?
                new ObjectParameter("Loc_City", loc_City) :
                new ObjectParameter("Loc_City", typeof(string));
    
            var loc_StateParameter = loc_State != null ?
                new ObjectParameter("Loc_State", loc_State) :
                new ObjectParameter("Loc_State", typeof(string));
    
            var loc_CountryParameter = loc_Country != null ?
                new ObjectParameter("Loc_Country", loc_Country) :
                new ObjectParameter("Loc_Country", typeof(string));
    
            var loc_ContactNoParameter = loc_ContactNo != null ?
                new ObjectParameter("Loc_ContactNo", loc_ContactNo) :
                new ObjectParameter("Loc_ContactNo", typeof(string));
    
            var loc_CommentParameter = loc_Comment != null ?
                new ObjectParameter("Loc_Comment", loc_Comment) :
                new ObjectParameter("Loc_Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_LOCATION", lOC_IDParameter, loc_CodeParameter, loc_RegionParameter, loc_NameParameter, loc_Hotel_NameParameter, loc_Spa_NameParameter, loc_AddressParameter, loc_CityParameter, loc_StateParameter, loc_CountryParameter, loc_ContactNoParameter, loc_CommentParameter);
        }
    
        public virtual int USER_LOGGED_IN(string uSER_ID, string pWD, ObjectParameter iS_VALID)
        {
            var uSER_IDParameter = uSER_ID != null ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(string));
    
            var pWDParameter = pWD != null ?
                new ObjectParameter("PWD", pWD) :
                new ObjectParameter("PWD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USER_LOGGED_IN", uSER_IDParameter, pWDParameter, iS_VALID);
        }
    
        public virtual int USER_LOGGED_OUT(string uSER_ID)
        {
            var uSER_IDParameter = uSER_ID != null ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USER_LOGGED_OUT", uSER_IDParameter);
        }
    }
}
